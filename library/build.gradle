apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

android {
    ndkVersion "${NDK_VERSION}"
    namespace 'cc.shinichi.library'
    compileSdkVersion 34
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 34
        multiDexEnabled true
        ndk {
            abiFilter "armeabi-v7a"
            abiFilter "arm64-v8a"
            abiFilter "x86"
            abiFilter "x86_64"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }
    sourceSets {
        main {
            jni.srcDirs = []
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.5'
    implementation "androidx.core:core-ktx:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // glide
    def glideVersion = "4.16.0"
    implementation "com.github.bumptech.glide:glide:${glideVersion}"
    annotationProcessor "com.github.bumptech.glide:compiler:${glideVersion}"
    implementation "com.github.bumptech.glide:okhttp3-integration:${glideVersion}"
    // https://mvnrepository.com/artifact/org.aomedia.avif.android/avif
    api 'org.aomedia.avif.android:avif:1.1.1.14d8e3c4'
    api("com.github.bumptech.glide:avif-integration:${glideVersion}") {
        exclude group: 'org.aomedia.avif.android', module: 'avif'
    }

    // ExoPlayer https://developer.android.com/media/media3/exoplayer/hello-world?hl=zh-cn#groovy
    def media3Version = "1.4.1"
    implementation "androidx.media3:media3-exoplayer:${media3Version}"
    implementation "androidx.media3:media3-exoplayer-dash:${media3Version}"
    implementation "androidx.media3:media3-ui:${media3Version}"
}

repositories {
    mavenCentral()
}

// =============================================================================
// --- MAVEN CENTRAL PUBLISHING CONFIGURATION ---
// =============================================================================

// Use Dokka to generate Javadoc and package it into a JAR.
task javadocJar(type: Jar) {
    dependsOn tasks.named("dokkaJavadoc")
    from tasks.named("dokkaJavadoc").get().getOutputDirectory()
    archiveClassifier.set('javadoc')
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId = GROUP_ID
                artifactId = ARTIFACT_ID
                version = VERSION_NAME

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = ARTIFACT_ID
                    description = POM_DESCRIPTION
                    url = POM_URL
                    licenses {
                        license {
                            name = POM_LICENSE_NAME
                            url = POM_LICENSE_URL
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                        }
                    }
                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                        url = POM_SCM_URL
                    }
                }
            }
        }
    }
}

signing {
    def signingKeyId = findProperty("signing.keyId") ?: System.getenv("SIGNING_KEY_ID")
    def signingPassword = findProperty("signing.password") ?: System.getenv("SIGNING_PASSWORD")
    def signingKeyRingFile = findProperty("signing.secretKeyRingFile")

    // Only sign if all signing properties are configured and the key ring file exists.
    // This prevents build failures in environments where signing is not configured.
    if (signingKeyId != null && signingPassword != null && signingKeyRingFile != null && new File(signingKeyRingFile).exists()) {
        sign publishing.publications
    }
}